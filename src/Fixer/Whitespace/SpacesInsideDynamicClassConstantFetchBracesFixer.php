<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Fixer\Whitespace;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\ConfigurableFixerTrait;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\CT;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;

/**
 * @phpstan-type _AutogeneratedInputConfiguration array{
 *  space?: 'none'|'single',
 * }
 * @phpstan-type _AutogeneratedComputedConfiguration array{
 *  space: 'none'|'single',
 * }
 *
 * @implements ConfigurableFixerInterface<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration>
 *
 * @no-named-arguments Parameter names are not covered by the backward compatibility promise.
 */
final class SpacesInsideDynamicClassConstantFetchBracesFixer extends AbstractFixer implements ConfigurableFixerInterface
{
    /** @use ConfigurableFixerTrait<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration> */
    use ConfigurableFixerTrait;

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Curly braces must be declared using the configured whitespace. By default, there are no additional spaces inside curly braces for dynamic class constant fetch.',
            [
                new CodeSample(
                    <<<'PHP'
                        <?php
                        echo Foo::{  $bar  };
                        echo Foo::{  bar()  };

                        PHP
                ),
                new CodeSample(
                    <<<'PHP'
                        <?php
                        echo Foo::{$bar};
                        echo Foo::{bar()};

                        PHP,
                    ['space' => 'single']
                ),
            ]
        );
    }

    public function getRequiredPhpVersionId(): int
    {
        return 8_03_00;
    }

    /**
     * {@inheritdoc}
     *
     * Must run after BraceTransformer.
     */
    public function getPriority(): int
    {
        return 3;
    }

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens->isAnyTokenKindsFound([CT::T_DYNAMIC_CLASS_CONSTANT_FETCH_CURLY_BRACE_OPEN]);
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        foreach ($tokens as $index => $token) {
            if (!$token->isGivenKind(CT::T_DYNAMIC_CLASS_CONSTANT_FETCH_CURLY_BRACE_OPEN)) {
                continue;
            }

            $endIndex = $this->findMatchingCloseBrace($tokens, $index);

            if ('none' === $this->configuration['space']) {
                $this->removeSpacesInsideBraces($tokens, $index, $endIndex);
            } elseif ('single' === $this->configuration['space']) {
                $this->ensureSingleSpaceInsideBraces($tokens, $index, $endIndex);
            }
        }
    }

    protected function createConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('space', 'Spacing to apply inside curly braces.'))
                ->setAllowedValues(['none', 'single'])
                ->setDefault('none')
                ->getOption(),
        ]);
    }

    private function removeSpacesInsideBraces(Tokens $tokens, int $openIndex, int $closeIndex): void
    {
        // Remove spaces immediately after opening brace
        $nextIndex = $openIndex + 1;
        while ($nextIndex < $closeIndex && $tokens[$nextIndex]->isWhitespace()) {
            $tokens->clearAt($nextIndex);
            ++$nextIndex;
        }

        // Remove spaces immediately before closing brace
        $prevIndex = $closeIndex - 1;
        while ($prevIndex > $openIndex && $tokens[$prevIndex]->isWhitespace()) {
            $tokens->clearAt($prevIndex);
            --$prevIndex;
        }
    }

    private function ensureSingleSpaceInsideBraces(Tokens $tokens, int $openIndex, int $closeIndex): void
    {
        // Check if braces are empty
        $nextMeaningfulIndex = $tokens->getNextMeaningfulToken($openIndex);
        if ($nextMeaningfulIndex === $closeIndex) {
            return; // Empty braces, don't add spaces
        }

        // Ensure single space after opening brace
        $this->ensureSpaceAt($tokens, $openIndex + 1, $nextMeaningfulIndex, true);

        // Ensure single space before closing brace
        $prevMeaningfulIndex = $tokens->getPrevMeaningfulToken($closeIndex);
        if ($prevMeaningfulIndex !== $openIndex) {
            $this->ensureSpaceAt($tokens, $prevMeaningfulIndex + 1, $closeIndex, true);
        }
    }

    private function ensureSpaceAt(Tokens $tokens, int $startIndex, int $endIndex, bool $addSpace): void
    {
        // Clear existing whitespace
        for ($i = $startIndex; $i < $endIndex; ++$i) {
            if ($tokens[$i]->isWhitespace()) {
                $tokens->clearAt($i);
            }
        }

        // Add space if requested
        if ($addSpace && $startIndex < $endIndex) {
            $tokens->insertAt($startIndex, new Token([\T_WHITESPACE, ' ']));
        }
    }

    private function findMatchingCloseBrace(Tokens $tokens, int $openIndex): int
    {
        $level = 1;
        $index = $openIndex + 1;

        while ($level > 0 && $index < $tokens->count()) {
            if ($tokens[$index]->isGivenKind(CT::T_DYNAMIC_CLASS_CONSTANT_FETCH_CURLY_BRACE_OPEN)) {
                ++$level;
            } elseif ($tokens[$index]->isGivenKind(CT::T_DYNAMIC_CLASS_CONSTANT_FETCH_CURLY_BRACE_CLOSE)) {
                --$level;
                if ($level === 0) {
                    return $index;
                }
            }
            ++$index;
        }

        // If we reach here, no matching brace was found
        throw new \RuntimeException(sprintf('No matching closing brace found for opening brace at index %d', $openIndex));
    }
}