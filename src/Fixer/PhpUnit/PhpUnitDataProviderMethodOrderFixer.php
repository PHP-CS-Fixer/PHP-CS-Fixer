<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Fixer\PhpUnit;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\Fixer\ClassNotation\OrderedClassElementsFixer;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\ConfigurableFixerTrait;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\Analyzer\DataProviderAnalyzer;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;

/**
 * @implements ConfigurableFixerInterface<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration>
 *
 * @phpstan-type _AutogeneratedInputConfiguration array{
 *  placement?: 'after'|'before'
 * }
 * @phpstan-type _AutogeneratedComputedConfiguration array{
 *  placement: 'after'|'before'
 * }
 */
final class PhpUnitDataProviderMethodOrderFixer extends AbstractFixer implements ConfigurableFixerInterface
{
    /** @use ConfigurableFixerTrait<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration> */
    use ConfigurableFixerTrait;

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens->isAnyTokenKindsFound(Token::getClassyTokenKinds());
    }

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Data provider method must be placed after/before the first test where used.',
            [
                new CodeSample(
                    '<?php
class FooTest extends TestCase {
    public function dataProvider() {}
    /**
     * @dataProvider dataProvider
     */
    public function testSomething($expected, $actual) {}
}
',
                ),
                new CodeSample(
                    '<?php
class FooTest extends TestCase {
    /**
     * @dataProvider dataProvider
     */
    public function testSomething($expected, $actual) {}
    public function dataProvider() {}
}
',
                    [
                        'placement' => 'before',
                    ]
                ),
            ]
        );
    }

    /**
     * {@inheritdoc}
     *
     * Must run after OrderedClassElementsFixer.
     */
    public function getPriority(): int
    {
        return 66;
    }

    protected function createConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('placement', 'Prefix that replaces "test".'))
                ->setAllowedValues(['after', 'before'])
                ->setDefault('after')
                ->getOption(),
        ]);
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        $dataProvidersWithUsageMethods = $this->getDataProvidersWithUsageMethods($tokens);

        $origMethodsOrder = [];
        foreach ($dataProvidersWithUsageMethods as [$dataProviderMethod, $usageMethods]) {
            $origMethodsOrder[$dataProviderMethod[1]] = $dataProviderMethod;
            foreach ($usageMethods as $usageMethod) {
                $origMethodsOrder[$usageMethod[1]] = $usageMethod;
            }
        }
        uasort($origMethodsOrder, static fn (array $a, array $b): int => $a[0] <=> $b[0]);

        $placementBefore = 'before' === $this->configuration['placement'];

        $newMethodsOrder = [];
        foreach ($dataProvidersWithUsageMethods as [$dataProviderMethod, $usageMethods]) {
            if ($placementBefore) {
                $newMethodsOrder[] = $dataProviderMethod[1];
            }

            foreach ($usageMethods as $usageMethod) {
                $newMethodsOrder[] = $usageMethod[1];
            }

            if (!$placementBefore) {
                $newMethodsOrder[] = $dataProviderMethod[1];
            }
        }

        if ($placementBefore) {
            $newMethodsOrder = array_reverse(array_unique(array_reverse($newMethodsOrder)));
        } else {
            $newMethodsOrder = array_unique($newMethodsOrder);
        }

        if ($newMethodsOrder === array_keys($origMethodsOrder)) {
            return;
        }

        $methodOrderFixer = new OrderedClassElementsFixer();
        $methodOrderFixer->configure(['order' => array_map(static fn (string $method): string => 'method:' . $method, $newMethodsOrder)]);
        $methodOrderFixer->applyFix($file, $tokens);
    }

    /**
     * @return list<array{
     *   array{int, string},
     *   non-empty-list<array{int, string}>
     * }>
     */
    private function getDataProvidersWithUsageMethods(Tokens $tokens): array
    {
        $dataProvidersWithUsageMethods = [];

        $dataProviderAnalyzer = new DataProviderAnalyzer();
        $endIndex = \count($tokens);
        foreach ($dataProviderAnalyzer->getDataProviders($tokens, 0, $endIndex) as $dataProviderAnalysis) {
            $usageMethods = [];
            foreach ($dataProviderAnalysis->getUsageIndices() as $usageIndex) {
                $methodNameTokens = $tokens->findSequence([[T_FUNCTION], [T_STRING]], $usageIndex[0], $endIndex);
                if (null === $methodNameTokens) {
                    continue;
                }

                $usageMethods[] = [array_key_last($methodNameTokens), end($methodNameTokens)->getContent()];
            }

            $dataProvidersWithUsageMethods[] = [
                [$dataProviderAnalysis->getNameIndex(), $dataProviderAnalysis->getName()],
                $usageMethods
            ];
        }

        return $dataProvidersWithUsageMethods;
    }
}
