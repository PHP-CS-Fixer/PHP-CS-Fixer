<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Fixer\Phpdoc;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\DocBlock\Annotation;
use PhpCsFixer\DocBlock\DocBlock;
use PhpCsFixer\DocBlock\TypeExpression;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\ConfigurableFixerTrait;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Preg;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;
use Symfony\Component\OptionsResolver\Exception\InvalidOptionsException;

/**
 * @phpstan-type _AutogeneratedInputConfiguration array{
 *  param_aliases?: list<string>,
 * }
 * @phpstan-type _AutogeneratedComputedConfiguration array{
 *  param_aliases: list<string>,
 * }
 *
 * @implements ConfigurableFixerInterface<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration>
 *
 * @author Jonathan Gruber <gruberjonathan@gmail.com>
 *
 * @no-named-arguments Parameter names are not covered by the backward compatibility promise.
 */
final class PhpdocParamOrderFixer extends AbstractFixer implements ConfigurableFixerInterface
{
    /** @use ConfigurableFixerTrait<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration> */
    use ConfigurableFixerTrait;

    private const PARAM_TAG = 'param';

    /** @var list<string> */
    private array $paramAliases = [];

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens->isTokenKindFound(\T_DOC_COMMENT);
    }

    /**
     * {@inheritdoc}
     *
     * Must run before PhpdocAlignFixer.
     * Must run after AlignMultilineCommentFixer, CommentToPhpdocFixer, PhpdocIndentFixer, PhpdocScalarFixer, PhpdocToCommentFixer, PhpdocTypesFixer.
     */
    public function getPriority(): int
    {
        return parent::getPriority();
    }

    protected function createConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('param_aliases', 'List of param-like tags to treat as aliases of `@param` and reorder together with them.'))
                ->setAllowedTypes(['string[]'])
                ->setAllowedValues([static function (array $aliases): bool {
                    foreach ($aliases as $alias) {
                        if (!preg_match('/^[a-z][a-z0-9-]*-param(-[a-z0-9-]+)?$/i', $alias)) {
                            throw new InvalidOptionsException(sprintf(
                                'The option "param_aliases" contains invalid tag "%s". Tag must match pattern: [a-z][a-z0-9-]*-param(-[a-z0-9-]+)?',
                                $alias
                            ));
                        }
                    }

                    return true;
                }])
                ->setDefault([])
                ->getOption(),
        ]);
    }

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Orders all `@param` annotations (and configured aliases like `@psalm-param`) in DocBlocks according to method signature.',
            [
                new CodeSample(
                    <<<'PHP'
                        <?php
                        /**
                         * Annotations in wrong order
                         *
                         * @param int   $a
                         * @param Foo   $c
                         * @param array $b
                         */
                        function m($a, array $b, Foo $c) {}

                        PHP
                ),
                new CodeSample(
                    <<<'PHP'
                        <?php
                        /**
                         * Annotations in wrong order
                         *
                         * @param string $b
                         * @psalm-param non-empty-string $a
                         * @param int $a
                         */
                        function m($a, $b) {}

                        PHP,
                    ['param_aliases' => ['psalm-param']]
                ),
            ]
        );
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        // Read configuration
        $this->paramAliases = $this->configuration['param_aliases'];

        foreach ($tokens as $index => $token) {
            if (!$token->isGivenKind(\T_DOC_COMMENT)) {
                continue;
            }

            // Check for function / closure token
            $nextFunctionToken = $tokens->getNextTokenOfKind($index, [[\T_FUNCTION], [\T_FN]]);
            if (null === $nextFunctionToken) {
                return;
            }

            // Find start index of param block (opening parenthesis)
            $paramBlockStart = $tokens->getNextTokenOfKind($index, ['(']);
            if (null === $paramBlockStart) {
                return;
            }

            $doc = new DocBlock($token->getContent());
            $paramAnnotations = $this->getParamLikeAnnotations($doc);

            if ([] === $paramAnnotations) {
                continue;
            }

            $paramNames = $this->getFunctionParamNames($tokens, $paramBlockStart);
            $doc = $this->rewriteDocBlock($doc, $paramNames, $paramAnnotations);

            $tokens[$index] = new Token([\T_DOC_COMMENT, $doc->getContent()]);
        }
    }

    /**
     * Get all param-like annotations including @param and configured aliases.
     *
     * @return list<Annotation>
     */
    private function getParamLikeAnnotations(DocBlock $doc): array
    {
        $annotations = $doc->getAnnotationsOfType(self::PARAM_TAG);

        // Collect alias annotations if configured
        foreach ($this->paramAliases as $alias) {
            $aliasAnnotations = $doc->getAnnotationsOfType($alias);
            $annotations = array_merge($annotations, $aliasAnnotations);
        }

        // Sort by start line to maintain document order
        usort($annotations, static fn (Annotation $a, Annotation $b): int => $a->getStart() <=> $b->getStart());

        return $annotations;
    }

    /**
     * @return list<Token>
     */
    private function getFunctionParamNames(Tokens $tokens, int $paramBlockStart): array
    {
        $paramBlockEnd = $tokens->findBlockEnd(Tokens::BLOCK_TYPE_PARENTHESIS_BRACE, $paramBlockStart);

        $paramNames = [];
        for (
            $i = $tokens->getNextTokenOfKind($paramBlockStart, [[\T_VARIABLE]]);
            null !== $i && $i < $paramBlockEnd;
            $i = $tokens->getNextTokenOfKind($i, [[\T_VARIABLE]])
        ) {
            $paramNames[] = $tokens[$i];
        }

        return $paramNames;
    }

    /**
     * Extract variable name from annotation content.
     *
     * @return null|string Variable name including $ prefix, or null if not found
     */
    private function extractVariableName(Annotation $annotation): ?string
    {
        // Match the first variable name after the tag, handling variadic (...$var) and reference (&$var)
        // Use word boundary to ensure we get the first complete variable name
        if (Preg::match('/@(?:'.preg_quote(self::PARAM_TAG, '/').'|'.implode('|', array_map(static fn (string $tag): string => preg_quote($tag, '/'), $this->paramAliases)).')\h+(?:[^\s]+\h+)*?(?:\.{3}|&)?\$(\w+)\b/', $annotation->getContent(), $matches)) {
            return '$'.$matches[1];
        }

        return null;
    }

    /**
     * Overwrite the param annotations in order.
     *
     * @param list<Token>                $paramNames
     * @param non-empty-list<Annotation> $paramAnnotations
     */
    private function rewriteDocBlock(DocBlock $doc, array $paramNames, array $paramAnnotations): DocBlock
    {
        $orderedAnnotations = $this->sortParamAnnotations($paramNames, $paramAnnotations);
        $otherAnnotations = $this->getOtherAnnotationsBetweenParams($doc, $paramAnnotations);

        // Append annotations found between param ones
        if ([] !== $otherAnnotations) {
            array_push($orderedAnnotations, ...$otherAnnotations);
        }

        // Overwrite all annotations between first and last @param tag in order
        $paramsStart = reset($paramAnnotations)->getStart();
        $paramsEnd = end($paramAnnotations)->getEnd();

        foreach ($doc->getAnnotations() as $annotation) {
            if ($annotation->getStart() < $paramsStart || $annotation->getEnd() > $paramsEnd) {
                continue;
            }

            $annotation->remove();
            $doc
                ->getLine($annotation->getStart())
                ->setContent(current($orderedAnnotations))
            ;

            next($orderedAnnotations);
        }

        return $doc;
    }

    /**
     * Sort the param annotations according to the function parameters.
     * Groups annotations by variable name, with @param first followed by aliases.
     *
     * @param list<Token>                $funcParamNames
     * @param non-empty-list<Annotation> $paramAnnotations
     *
     * @return non-empty-list<string>
     */
    private function sortParamAnnotations(array $funcParamNames, array $paramAnnotations): array
    {
        $validParams = [];
        $usedIndices = [];

        // Use the existing findParamAnnotationByIdentifier which handles nested blocks correctly
        foreach ($funcParamNames as $paramName) {
            $matchingAnnotations = $this->findParamAnnotationByIdentifier($paramAnnotations, $paramName->getContent());

            // Sort annotations for this parameter: @param first, then aliases in configured order
            $sorted = $this->sortAnnotationsByTag($matchingAnnotations);

            foreach ($sorted as $index => $annotation) {
                $validParams[] = $annotation->getContent();
                $usedIndices[] = $index;
            }
        }

        // Detect superfluous annotations (ones not matched to any parameter)
        $invalidParams = [];
        foreach ($paramAnnotations as $i => $annotation) {
            if (!\in_array($i, $usedIndices, true)) {
                $invalidParams[] = $annotation->getContent();
            }
        }

        // Append invalid parameters to the (ordered) valid ones
        $orderedParams = array_merge($validParams, $invalidParams);
        \assert(\count($orderedParams) > 0);

        return $orderedParams;
    }

    /**
     * Sort annotations by tag type: @param first, then aliases in configured order.
     *
     * @param array<int, Annotation> $annotations Annotations with their original indices
     *
     * @return array<int, Annotation> Sorted annotations with their original indices preserved
     */
    private function sortAnnotationsByTag(array $annotations): array
    {
        if (\count($annotations) <= 1) {
            return $annotations;
        }

        // Create tag priority map: @param = 0, aliases by config order
        $tagPriority = [self::PARAM_TAG => 0];
        foreach ($this->paramAliases as $i => $alias) {
            $tagPriority[$alias] = $i + 1;
        }

        // Sort by tag priority
        uksort($annotations, static function (int $indexA, int $indexB) use ($annotations, $tagPriority): int {
            $tagA = $annotations[$indexA]->getTag()->getName();
            $tagB = $annotations[$indexB]->getTag()->getName();

            $priorityA = $tagPriority[$tagA] ?? PHP_INT_MAX;
            $priorityB = $tagPriority[$tagB] ?? PHP_INT_MAX;

            // Primary sort by tag priority
            if ($priorityA !== $priorityB) {
                return $priorityA <=> $priorityB;
            }

            // Secondary sort by original document order (index)
            return $indexA <=> $indexB;
        });

        return $annotations;
    }

    /**
     * Fetch all annotations except the param-like ones.
     *
     * @param list<Annotation> $paramAnnotations
     *
     * @return list<string>
     */
    private function getOtherAnnotationsBetweenParams(DocBlock $doc, array $paramAnnotations): array
    {
        if (0 === \count($paramAnnotations)) {
            return [];
        }

        $paramsStart = reset($paramAnnotations)->getStart();
        $paramsEnd = end($paramAnnotations)->getEnd();

        // Build list of all param-like tags to exclude
        $paramLikeTags = array_merge([self::PARAM_TAG], $this->paramAliases);

        $otherAnnotations = [];
        foreach ($doc->getAnnotations() as $annotation) {
            if ($annotation->getStart() < $paramsStart || $annotation->getEnd() > $paramsEnd) {
                continue;
            }

            // Exclude all param-like tags, not just @param
            if (!\in_array($annotation->getTag()->getName(), $paramLikeTags, true)) {
                $otherAnnotations[] = $annotation->getContent();
            }
        }

        return $otherAnnotations;
    }

    /**
     * Return the indices of the lines of a specific parameter annotation.
     *
     * @param list<Annotation> $paramAnnotations
     *
     * @return array<int, Annotation> Mapping of found indices and corresponding Annotations
     */
    private function findParamAnnotationByIdentifier(array $paramAnnotations, string $identifier): array
    {
        $blockLevel = 0;
        $blockMatch = false;
        $blockIndices = [];
        $topLevelMatches = []; // Collect all top-level matches

        // Build regex pattern for all param-like tags
        $tags = array_merge([self::PARAM_TAG], $this->paramAliases);
        $tagPattern = implode('|', array_map(static fn (string $tag): string => preg_quote($tag, '/'), $tags));

        $paramRegex = '/\*\h*@(?:'.$tagPattern.')\h*(?:|'.TypeExpression::REGEX_TYPES.'\h*)&?(?=\$\b)'.preg_quote($identifier).'\b/';

        foreach ($paramAnnotations as $i => $param) {
            $blockStart = Preg::match('/\s*{\s*/', $param->getContent());
            $blockEndMatches = Preg::matchAll('/}[\*\s\n]*/', $param->getContent());

            if (0 === $blockLevel && Preg::match($paramRegex, $param->getContent())) {
                if ($blockStart) {
                    $blockMatch = true; // Start of a nested block
                } else {
                    $topLevelMatches[$i] = $param; // Collect top level match instead of returning immediately
                }
            }

            if ($blockStart) {
                ++$blockLevel;
            }

            if (0 !== $blockEndMatches) {
                $blockLevel -= $blockEndMatches;
            }

            if ($blockMatch) {
                $blockIndices[$i] = $param;
                if (0 === $blockLevel) {
                    return $blockIndices; // Still return immediately for nested blocks
                }
            }
        }

        return $topLevelMatches; // Return all top-level matches
    }
}
