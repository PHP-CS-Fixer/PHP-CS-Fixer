<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Fixer\Phpdoc;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\ConfigurationException\InvalidFixerConfigurationException;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\PhpUnit\PhpUnitInternalClassFixer;
use PhpCsFixer\Fixer\WhitespacesAwareFixerInterface;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\FileSpecificCodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Preg;
use PhpCsFixer\Tokenizer\Analyzer\Analysis\NamespaceUseAnalysis;
use PhpCsFixer\Tokenizer\Analyzer\AttributeAnalyzer;
use PhpCsFixer\Tokenizer\Analyzer\FullyQualifiedNameAnalyzer;
use PhpCsFixer\Tokenizer\CT;
use PhpCsFixer\Tokenizer\FCT;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;
use PhpCsFixer\WhitespacesFixerConfig;

/**
 * @phpstan-type _InputConfig array{directory?: string, description?: string}
 * @phpstan-type _Config array{directory: string, description: string}
 *
 * @no-named-arguments
 *
 * @phpstan-type _AutogeneratedInputConfiguration array{
 *  description?: string,
 *  directory?: string,
 * }
 * @phpstan-type _AutogeneratedComputedConfiguration array{
 *  description: string,
 *  directory: string,
 * }
 *
 * @implements ConfigurableFixerInterface<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration>
 */
final class PhpdocTagNoNamedArgumentsFixer extends AbstractFixer implements ConfigurableFixerInterface, WhitespacesAwareFixerInterface
{
    private string $description = '';
    private string $directory = '';

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'There must be `@no-named-arguments` tag in PHPDoc of a class/enum/interface/trait.',
            [
                new FileSpecificCodeSample(
                    <<<'PHP'
                        <?php
                        class Foo
                        {
                            public function bar(string $s) {}
                        }

                        PHP,
                    new \SplFileInfo(__DIR__.'/../..'),
                ),
                new FileSpecificCodeSample(
                    <<<'PHP'
                        <?php
                        class Foo
                        {
                            public function bar(string $s) {}
                        }

                        PHP,
                    new \SplFileInfo(__DIR__.'/../..'),
                    ['description' => 'the reason'],
                ),
            ],
        );
    }

    public function getConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('description', 'Description of the tag.'))
                ->setAllowedTypes(['string'])
                ->setDefault('')
                ->getOption(),
            (new FixerOptionBuilder('directory', 'Directory in which apply the changes, empty value will result with current working directory (result of `getcwd` call).'))
                ->setAllowedTypes(['string'])
                ->setDefault('')
                ->getOption(),
        ]);
    }

    /**
     * @param _InputConfig $configuration
     */
    public function configure(array $configuration): void
    {
        /** @var array{directory: string, description: string} $configuration */
        $configuration = $this->getConfigurationDefinition()->resolve($configuration);

        $this->directory = $configuration['directory'];

        if ('' === $this->directory) {
            $cwd = getcwd();
            \assert(\is_string($cwd));
            $this->directory = $cwd;
        }

        if (!is_dir($this->directory)) {
            throw new InvalidFixerConfigurationException($this->getName(), \sprintf('The directory "%s" does not exists.', $this->directory));
        }

        $this->directory = realpath($this->directory).\DIRECTORY_SEPARATOR;

        $this->description = $configuration['description'];
    }

    /**
     * {@inheritdoc}
     *
     * Must run before PhpdocAlignFixer.
     * Must run after AlignMultilineCommentFixer, CommentToPhpdocFixer, PhpdocIndentFixer, PhpdocScalarFixer, PhpdocToCommentFixer, PhpdocTypesFixer.
     */
    public function getPriority(): int
    {
        return 0;
    }

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens->isAnyTokenKindsFound(Token::getClassyTokenKinds());
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        if (!str_starts_with($file->getRealPath(), $this->directory)) {
            return;
        }

        for ($index = $tokens->count() - 1; $index > 0; --$index) {
            if (!$tokens[$index]->isClassy()) {
                continue;
            }

            $prevIndex = $tokens->getPrevMeaningfulToken($index);
            \assert(\is_int($prevIndex));

            if ($tokens[$prevIndex]->isGivenKind(\T_NEW)) {
                continue;
            }

            if (self::isAttributeClass($tokens, $prevIndex)) {
                continue;
            }

            $this->ensureIsDocBlockWithNoNameArgumentsTag($tokens, $index);

            $docBlockIndex = $tokens->getPrevTokenOfKind($index + 2, [[\T_DOC_COMMENT]]);
            \assert(\is_int($docBlockIndex));

            $content = $tokens[$docBlockIndex]->getContent();

            $newContent = Preg::replace('/@no-named-arguments.*\R/', rtrim('@no-named-arguments '.$this->description).$this->whitespacesConfig->getLineEnding(), $content);

            if ($newContent !== $content) {
                $tokens[$docBlockIndex] = new Token([\T_DOC_COMMENT, $newContent]);
            }
        }
    }

    private static function isAttributeClass(Tokens $tokens, int $index): bool
    {
        while ($tokens[$index]->isGivenKind([\T_ABSTRACT, \T_FINAL, FCT::T_READONLY])) {
            $index = $tokens->getPrevMeaningfulToken($index);
            \assert(\is_int($index));
        }

        if (!$tokens[$index]->isGivenKind(CT::T_ATTRIBUTE_CLOSE)) {
            return false;
        }

        $fullyQualifiedNameAnalyzer = new FullyQualifiedNameAnalyzer($tokens);

        foreach (AttributeAnalyzer::collect($tokens, $tokens->findBlockStart(Tokens::BLOCK_TYPE_ATTRIBUTE, $index)) as $attributeAnalysis) {
            foreach ($attributeAnalysis->getAttributes() as $attribute) {
                $attributeName = strtolower($fullyQualifiedNameAnalyzer->getFullyQualifiedName($attribute['name'], $attribute['start'], NamespaceUseAnalysis::TYPE_CLASS));
                if ('attribute' === $attributeName) {
                    return true;
                }
            }
        }

        return false;
    }

    private function ensureIsDocBlockWithNoNameArgumentsTag(Tokens $tokens, int $index): void
    {
        /** @var null|callable(WhitespacesFixerConfig, Tokens, int): void $ensureIsDocBlockWithTagNoNameArguments */
        static $ensureIsDocBlockWithTagNoNameArguments;

        if (null === $ensureIsDocBlockWithTagNoNameArguments) {
            $ensureIsDocBlockWithTagNoNameArguments = \Closure::bind(
                static function (WhitespacesFixerConfig $whitespacesConfig, Tokens $tokens, int $index): void {
                    $phpUnitInternalClassFixer = new PhpUnitInternalClassFixer();
                    $phpUnitInternalClassFixer->setWhitespacesConfig($whitespacesConfig);
                    $phpUnitInternalClassFixer->ensureIsDocBlockWithAnnotation($tokens, $index, 'no-named-arguments', ['internal', 'no-named-arguments'], []);
                },
                null,
                PhpUnitInternalClassFixer::class,
            );
        }

        $ensureIsDocBlockWithTagNoNameArguments($this->whitespacesConfig, $tokens, $index);
    }
}
