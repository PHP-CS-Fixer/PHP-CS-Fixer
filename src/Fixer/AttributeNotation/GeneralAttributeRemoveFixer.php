<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Fixer\AttributeNotation;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\ConfigurableFixerTrait;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\Analyzer\Analysis\AttributeAnalysis;
use PhpCsFixer\Tokenizer\Analyzer\Analysis\NamespaceAnalysis;
use PhpCsFixer\Tokenizer\Analyzer\Analysis\NamespaceUseAnalysis;
use PhpCsFixer\Tokenizer\Analyzer\AttributeAnalyzer;
use PhpCsFixer\Tokenizer\Analyzer\NamespacesAnalyzer;
use PhpCsFixer\Tokenizer\Analyzer\NamespaceUsesAnalyzer;
use PhpCsFixer\Tokenizer\Tokens;

/**
 * @author Raffaele Carelle <raffaele.carelle@gmail.com>
 *
 * @implements ConfigurableFixerInterface<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration>
 *
 * @phpstan-import-type _AttributeItems from AttributeAnalysis
 * @phpstan-import-type _AttributeItem from AttributeAnalysis
 *
 * @phpstan-type _AutogeneratedInputConfiguration array{
 *  attributes?: list<class-string>
 * }
 * @phpstan-type _AutogeneratedComputedConfiguration array{
 *  attributes: list<class-string>
 * }
 */
final class GeneralAttributeRemoveFixer extends AbstractFixer implements ConfigurableFixerInterface
{
    /** @use ConfigurableFixerTrait<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration> */
    use ConfigurableFixerTrait;

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Configured attributes should be omitted (FQNs strings).',
            [
                new CodeSample(
                    '<?php
#[\A\B\Foo]
function foo() {}
',
                    ['attributes' => ['\A\B\Foo']]
                ),
                new CodeSample(
                    '<?php
use A\B\Bar as BarAlias;

#[\A\B\Foo]
#[BarAlias]
function foo() {}
',
                    ['attributes' => ['\A\B\Foo', 'A\B\Bar']]
                ),
            ]
        );
    }

    public function getPriority(): int
    {
        return 0;
    }

    public function isCandidate(Tokens $tokens): bool
    {
        return \defined('T_ATTRIBUTE') && $tokens->isTokenKindFound(T_ATTRIBUTE);
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        if (0 === \count($this->configuration['attributes'])) {
            return;
        }

        $index = 0;

        while (null !== $index = $tokens->getNextTokenOfKind($index, [[T_ATTRIBUTE]])) {
            $attributeAnalysis = AttributeAnalyzer::collectOne($tokens, $index);

            if (1 === \count($attributeAnalysis->getAttributes())) {
                $elements = [
                    [
                        'name' => $attributeAnalysis->getAttributes()[0]['name'],
                        'start' => $attributeAnalysis->getStartIndex(),
                        'end' => $attributeAnalysis->getEndIndex(),
                    ],
                ];
            } else {
                $elements = array_map(static fn (array $attribute): array => [
                    'name' => $attribute['name'],
                    'start' => $attribute['start'],
                    'end' => $attribute['end'],
                ], $attributeAnalysis->getAttributes());
            }

            $endIndex = $attributeAnalysis->getEndIndex();

            $removedCount = 0;
            foreach ($elements as $element) {
                $fullname = $this->determineAttributeFullyQualifiedName($tokens, $element['name'], $element['start']);

                if (!\in_array($fullname, $this->configuration['attributes'], true)) {
                    continue;
                }

                $tokens->clearRange($element['start'], $element['end']);
                ++$removedCount;

                $siblingIndex = $tokens->getNonEmptySibling($element['end'], 1);

                // Clear element comma
                if (',' === $tokens[$siblingIndex]->getContent()) {
                    $tokens->clearAt($siblingIndex);
                }
            }

            // Clear whole attribute if all are removed (multiline attribute case)
            if (\count($attributeAnalysis->getAttributes()) === $removedCount) {
                $tokens->clearRange($attributeAnalysis->getStartIndex(), $attributeAnalysis->getEndIndex());
            }

            // Clear trailing comma
            $tokenIndex = $tokens->getMeaningfulTokenSibling($attributeAnalysis->getClosingBracketIndex(), -1);
            if (',' === $tokens[$tokenIndex]->getContent()) {
                $tokens->clearAt($tokenIndex);
            }

            $index = $endIndex;
        }
    }

    protected function createConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('attributes', 'List of attributes to remove FQ, e.g. `Foo\Bar`.'))
                ->setAllowedTypes(['class-string[]'])
                ->setDefault([])
                ->getOption(),
        ]);
    }

    private function determineAttributeFullyQualifiedName(Tokens $tokens, string $name, int $index): string
    {
        if ('\\' === $name[0]) {
            return $name;
        }

        if (!$tokens[$index]->isGivenKind([T_STRING, T_NS_SEPARATOR])) {
            $index = $tokens->getNextTokenOfKind($index, [[T_STRING], [T_NS_SEPARATOR]]);
        }

        [$namespaceAnalysis, $namespaceUseAnalyses] = $this->collectNamespaceAnalysis($tokens, $index);
        $namespace = $namespaceAnalysis->getFullName();
        $firstTokenOfName = $tokens[$index]->getContent();
        $namespaceUseAnalysis = $namespaceUseAnalyses[$firstTokenOfName] ?? false;

        if ($namespaceUseAnalysis instanceof NamespaceUseAnalysis) {
            $namespace = $namespaceUseAnalysis->getFullName();

            if ($name === $firstTokenOfName) {
                return $namespace;
            }

            $name = substr((string) strstr($name, '\\'), 1);
        }

        return $namespace.'\\'.$name;
    }

    /**
     * @return array{NamespaceAnalysis, array<string, NamespaceUseAnalysis>}
     */
    private function collectNamespaceAnalysis(Tokens $tokens, int $startIndex): array
    {
        $namespaceAnalysis = (new NamespacesAnalyzer())->getNamespaceAt($tokens, $startIndex);
        $namespaceUseAnalyses = (new NamespaceUsesAnalyzer())->getDeclarationsInNamespace($tokens, $namespaceAnalysis);

        $uses = [];
        foreach ($namespaceUseAnalyses as $use) {
            if (!$use->isClass()) {
                continue;
            }

            $uses[$use->getShortName()] = $use;
        }

        return [$namespaceAnalysis, $uses];
    }
}
