===========
Config file
===========

No config
---------

It is possible to *not* have the config file. In that case, the default rule set (@PSR12) will be applied, yet the path will need to be provided via CLI.

.. code-block:: console

    php php-cs-fixer.phar fix .

It is also possible to provide command line options to customize rules, yet instead of using them,
it's recommended to save the project configuration in a ``.php-cs-fixer.dist.php`` file in the root directory of your project.
The file must return an instance of `PhpCsFixer\\ConfigInterface <./../src/ConfigInterface.php>`_
which lets you configure the rules, the files and directories that
need to be analyzed. You may also create ``.php-cs-fixer.php`` file, which is
the local configuration that will be used instead of the project configuration. It
is a good practice to add that file into your ``.gitignore`` file.
With the ``--config`` option you can specify the path to the config file.


The simplest config
-------------------

The simplest config declares paths under control and rules to apply/check:

.. code-block:: php

    <?php

    $finder = (new PhpCsFixer\Finder())
        ->in(__DIR__)
    ;

    return (new PhpCsFixer\Config())
        ->setRules([
            '@PER-CS' => true,
            '@PHP82Migration' => true,
        ])
        ->setFinder($finder)
    ;

Default finder ignores ``__DIR__ . "/vendor"`` dir, "hidden" paths (ones starting with a dot) and VCS paths (e.g. ``.git``), and filter only for ``*.php`` files.

Configuring paths
-----------------

The example below will manipulate which paths to fix or not:

.. code-block:: php

    <?php

    $finder = (new PhpCsFixer\Finder())
        ->in(__DIR__)
        ->exclude([
            'autogenerated_content',
            'tests/fixtures',
        ])
        ->notPath([
            'dump.php',
            'src/exception_file.php',
        ])
    ;

    return (new PhpCsFixer\Config())
        ->setRules([
            '@PhpCsFixer' => true,
        ])
        ->setFinder($finder)
    ;

Note that ``exclude`` will work only for directories, so if you need to exclude a file, use ``notPath``.
Both ``exclude`` and ``notPath`` methods accept only relative paths to the ones defined with the ``in`` method, can be called multiple times and accept string or array of them.

See `Symfony\\Finder <https://symfony.com/doc/current/components/finder.html#location>`_
online documentation for other ``Finder`` methods.

Configuring rules
-----------------

The example below will add two rules to the default list of PSR12 set rules:

.. code-block:: php

    <?php

    $finder = (new PhpCsFixer\Finder())
        ->in(__DIR__)
    ;

    return (new PhpCsFixer\Config())
        ->setRules([
            '@PSR12' => true,
            'strict_param' => true,
            'array_syntax' => ['syntax' => 'short'],
        ])
        ->setFinder($finder)
    ;

You may also use an exclude list for the rules instead of the above shown include approach.
The following example shows how to use all ``PhpCsFixer`` rules but without the ``align_multiline_comment`` rule.

.. code-block:: php

    <?php

    $finder = (new PhpCsFixer\Finder())
        ->in(__DIR__)
    ;

    return (new PhpCsFixer\Config())
        ->setRules([
            '@PhpCsFixer' => true,
            'align_multiline_comment' => false,
        ])
        ->setFinder($finder)
    ;

If you need to disable or reconfigure a rule for specific files, you can use the ``setFilterFixerByFile`` method:

.. code-block:: php

    <?php

    $finder = (new PhpCsFixer\Finder())
        ->in(__DIR__)
    ;

    return (new PhpCsFixer\Config())
        ->setRules([
            'array_syntax' => ['syntax' => 'short'],
            'strict_param' => true,
        ])
        ->setFinder($finder)
        ->setFilterFixerByFile(static function (PhpCsFixer\Fixer\FixerInterface $fixer, SplFileInfo $file): ?PhpCsFixer\Fixer\FixerInterface {
            // disable the 'strict_param' rule for all files in the "tests" directory
            if ('strict_param' === $fixer->getName() && strpos($file->getPathname(), '/tests/') !== false) {
                return null;
            }
            // reconfigure the 'array_syntax' rule to use long syntax for all files in the "bin" directory
            if ('array_syntax' === $fixer->getName() && strpos($file->getPathname(), '/bin/') !== false) {
                $fixer = clone $fixer;
                $fixer->configure(['syntax' => 'long']);
            }

            return $fixer;
        })
    ;

.. warning::

    **⚠️ WARNING ⚠️**

    If you need to reconfigure a fixer instance in the callback passed to ``setFilterFixerByFile()``:

    - make sure to clone it first (as in the example above), as the same instance is used for all files.
    - if you update the configuration of a fixer, the PHP-CS-Fixer cache won't consider that: you'll need to clear the cache manually (e.g. by deleting the cache file).

Configuring whitespaces
-----------------------

You may want to use non-linux whitespaces in your project. Then you need to
configure them in your config file.

.. code-block:: php

    <?php

    $finder = (new PhpCsFixer\Finder())
        ->in(__DIR__)
    ;

    return (new PhpCsFixer\Config())
        ->setRules([
            '@Symfony' => true,
        ])
        ->setFinder($finder)
        ->setIndent("\t")
        ->setLineEnding("\r\n")
    ;

It's possible to register custom rule sets, which makes it easier to reuse custom configuration between multiple projects. If you have prepared rule set, you can register it, and then enable it in the rules. Custom rule sets (in this example ``\MyNameSpace\MyRuleSetClass``) must implement ``\PhpCsFixer\RuleSet\RuleSetDefinitionInterface``.

.. code-block:: php

    <?php

    return (new PhpCsFixer\Config())
        ->registerCustomRuleSets([
            MyNameSpace\MyRuleSetClass::class, // It identifies itself as '@MyRuleSet'
        ])
        ->setRules([
            '@MyRuleSet' => true,
        ])
    ;

ℹ️ If you use ``\PhpCsFixer\ConfigInterface`` implementation other than built-in one, make sure it implements ``\PhpCsFixer\CustomRulesetsAwareConfigInterface``.
