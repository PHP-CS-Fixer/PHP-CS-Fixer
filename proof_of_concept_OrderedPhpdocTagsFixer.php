<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumiński <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Fixer\Phpdoc;

use PhpCsFixer\AbstractFixer;
use PhpCsFixer\DocBlock\DocBlock;
use PhpCsFixer\Fixer\ConfigurableFixerInterface;
use PhpCsFixer\Fixer\ConfigurableFixerTrait;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolver;
use PhpCsFixer\FixerConfiguration\FixerConfigurationResolverInterface;
use PhpCsFixer\FixerConfiguration\FixerOptionBuilder;
use PhpCsFixer\FixerDefinition\CodeSample;
use PhpCsFixer\FixerDefinition\FixerDefinition;
use PhpCsFixer\FixerDefinition\FixerDefinitionInterface;
use PhpCsFixer\Tokenizer\Token;
use PhpCsFixer\Tokenizer\Tokens;
use PhpCsFixer\Utils;
use Symfony\Component\OptionsResolver\Exception\InvalidOptionsException;

/**
 * @phpstan-type _AutogeneratedInputConfiguration array{
 *  sort_algorithm?: 'alpha'|'custom'|'none',
 *  order?: list<string>,
 *  case_sensitive?: bool,
 * }
 * @phpstan-type _AutogeneratedComputedConfiguration array{
 *  sort_algorithm: 'alpha'|'custom'|'none',
 *  order: list<string>,
 *  case_sensitive: bool,
 * }
 *
 * @implements ConfigurableFixerInterface<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration>
 *
 * @author Graham Campbell <hello@gjcampbell.co.uk>
 * @author Jakub Kwaśniewski <jakub@zero-85.pl>
 *
 * @no-named-arguments Parameter names are not covered by the backward compatibility promise.
 */
final class OrderedPhpdocTagsFixer extends AbstractFixer implements ConfigurableFixerInterface
{
    /** @use ConfigurableFixerTrait<_AutogeneratedInputConfiguration, _AutogeneratedComputedConfiguration> */
    use ConfigurableFixerTrait;

    /**
     * @var list<string>
     *
     * @TODO: 4.0 - change default to ['param', 'return', 'throws']
     */
    private const ORDER_DEFAULT = ['param', 'throws', 'return'];

    /** @var list<string> */
    private array $configurationOrder;

    public function getDefinition(): FixerDefinitionInterface
    {
        return new FixerDefinition(
            'Annotations in PHPDoc should be ordered so that `@param` annotations come first, then `@throws` annotations, then `@return` annotations.',
            [
                new CodeSample(
                    '<?php
/**
 * Hello there!
 *
 * @throws Exception|RuntimeException foo
 * @custom Test!
 * @return int  Return the number of changes.
 * @param string $foo
 * @param bool   $bar Bar
 */
function hello($foo, $bar) {}
'
                ),
                new CodeSample(
                    '<?php
/**
 * Hello there!
 *
 * @throws Exception|RuntimeException foo
 * @custom Test!
 * @return int  Return the number of changes.
 * @param string $foo
 * @param bool   $bar Bar
 */
function hello($foo, $bar) {}
',
                    ['sort_algorithm' => 'alpha']
                ),
                new CodeSample(
                    '<?php
/**
 * Hello there!
 *
 * @throws Exception|RuntimeException foo
 * @custom Test!
 * @return int  Return the number of changes.
 * @param string $foo
 * @param bool   $bar Bar
 */
function hello($foo, $bar) {}
',
                    [
                        'sort_algorithm' => 'custom',
                        'order' => ['return', 'param', 'throws']
                    ]
                ),
            ]
        );
    }

    public function isCandidate(Tokens $tokens): bool
    {
        return $tokens->isTokenKindFound(T_DOC_COMMENT);
    }

    protected function applyFix(\SplFileInfo $file, Tokens $tokens): void
    {
        foreach ($tokens as $index => $token) {
            if (!$token->isGivenKind(T_DOC_COMMENT)) {
                continue;
            }

            $doc = new DocBlock($token->getContent());
            $annotations = $doc->getAnnotationsOfType(DocBlock::getTagsWithTypes());

            if (\count($annotations) < 2) {
                continue;
            }

            $originalOrder = $this->getOriginalOrder($annotations);
            $newOrder = $this->getNewOrder($originalOrder);

            if ($originalOrder === $newOrder) {
                continue;
            }

            $this->sortAnnotations($doc, $annotations, $newOrder);
            $tokens[$index] = new Token([T_DOC_COMMENT, $doc->getContent()]);
        }
    }

    protected function createConfigurationDefinition(): FixerConfigurationResolverInterface
    {
        return new FixerConfigurationResolver([
            (new FixerOptionBuilder('sort_algorithm', 'How PHPDoc tags should be sorted.'))
                ->setAllowedValues(['alpha', 'custom', 'none'])
                ->setDefault('custom')
                ->getOption(),
            (new FixerOptionBuilder('order', 'Custom order of PHPDoc tags (when sort_algorithm is "custom").'))
                ->setAllowedTypes(['string[]'])
                ->setAllowedValues([static function (array $order): bool {
                    if (\count($order) < 2) {
                        throw new InvalidOptionsException('The option "order" value is invalid. Minimum two tags are required.');
                    }

                    $unique = array_unique($order);
                    if (\count($order) !== \count($unique)) {
                        $duplicates = array_keys(array_filter(array_count_values($order), static fn (int $count): bool => $count > 1));

                        throw new InvalidOptionsException(\sprintf(
                            'The option "order" value is invalid. Tag%s %s %s duplicated.',
                            1 === \count($duplicates) ? '' : 's',
                            Utils::naturalLanguageJoin($duplicates),
                            1 === \count($duplicates) ? 'is' : 'are'
                        ));
                    }

                    return true;
                }])
                ->setDefault(self::ORDER_DEFAULT)
                ->getOption(),
            (new FixerOptionBuilder('case_sensitive', 'Whether the sorting should be case sensitive.'))
                ->setAllowedTypes(['bool'])
                ->setDefault(false)
                ->getOption(),
        ]);
    }

    /**
     * Override configure to handle legacy configuration format
     */
    public function configure(array $configuration): void
    {
        // Handle legacy configuration where 'order' was the only option
        if (isset($configuration['order']) && !isset($configuration['sort_algorithm'])) {
            // Emit deprecation warning for old configuration format
            trigger_error(
                'Configuring ordered_phpdoc_tags with direct "order" option is deprecated. ' .
                'Use "sort_algorithm" => "custom" and "order" => [...] instead.',
                E_USER_DEPRECATED
            );

            $configuration['sort_algorithm'] = 'custom';
        }

        parent::configure($configuration);

        $this->configurationOrder = $this->configuration['order'];
    }

    private function getOriginalOrder(array $annotations): array
    {
        $order = [];
        foreach ($annotations as $annotation) {
            $type = $annotation->getTag()->getName();
            if (!\in_array($type, $order, true)) {
                $order[] = $type;
            }
        }

        return $order;
    }

    private function getNewOrder(array $originalOrder): array
    {
        $algorithm = $this->configuration['sort_algorithm'];

        switch ($algorithm) {
            case 'alpha':
                $sorted = $originalOrder;
                if ($this->configuration['case_sensitive']) {
                    sort($sorted);
                } else {
                    natcasesort($sorted);
                    $sorted = array_values($sorted);
                }
                return $sorted;

            case 'none':
                return $originalOrder;

            case 'custom':
            default:
                return $this->sortByConfiguredOrder($originalOrder);
        }
    }

    private function sortByConfiguredOrder(array $originalOrder): array
    {
        $order = [];
        
        // Add tags in configured order first
        foreach ($this->configurationOrder as $tag) {
            if (\in_array($tag, $originalOrder, true)) {
                $order[] = $tag;
            }
        }

        // Add remaining tags not in configuration
        foreach ($originalOrder as $tag) {
            if (!\in_array($tag, $order, true)) {
                $order[] = $tag;
            }
        }

        return $order;
    }

    private function sortAnnotations(DocBlock $doc, array $annotations, array $newOrder): void
    {
        $annotationsByType = [];
        foreach ($annotations as $annotation) {
            $type = $annotation->getTag()->getName();
            $annotationsByType[$type][] = $annotation;
        }

        $lines = $doc->getLines();
        $newLines = [];
        $annotationsToReplace = [];

        // Collect all annotation lines to be reordered
        foreach ($annotations as $annotation) {
            $start = $annotation->getStart();
            $end = $annotation->getEnd();
            
            for ($i = $start; $i <= $end; ++$i) {
                $annotationsToReplace[$i] = $lines[$i];
            }
        }

        // Build new content with reordered annotations
        $sortedAnnotations = [];
        foreach ($newOrder as $type) {
            if (isset($annotationsByType[$type])) {
                $sortedAnnotations = array_merge($sortedAnnotations, $annotationsByType[$type]);
            }
        }

        // Replace annotation lines in document
        $replacementIndex = 0;
        foreach ($lines as $index => $line) {
            if (isset($annotationsToReplace[$index])) {
                if ($replacementIndex < \count($sortedAnnotations)) {
                    $annotation = $sortedAnnotations[$replacementIndex];
                    $newLines[] = $lines[$annotation->getStart()];
                    ++$replacementIndex;
                } else {
                    // Skip extra lines if we have fewer sorted annotations
                    continue;
                }
            } else {
                $newLines[] = $line;
            }
        }

        // Update the DocBlock content
        $doc->setLines($newLines);
    }
}