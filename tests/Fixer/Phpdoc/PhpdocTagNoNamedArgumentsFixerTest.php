<?php

declare(strict_types=1);

/*
 * This file is part of PHP CS Fixer.
 *
 * (c) Fabien Potencier <fabien@symfony.com>
 *     Dariusz Rumi≈Ñski <dariusz.ruminski@gmail.com>
 *
 * This source file is subject to the MIT license that is bundled
 * with this source code in the file LICENSE.
 */

namespace PhpCsFixer\Tests\Fixer\Phpdoc;

use PhpCsFixer\ConfigurationException\InvalidFixerConfigurationException;
use PhpCsFixer\Tests\Test\AbstractFixerTestCase;
use PhpCsFixer\WhitespacesFixerConfig;

/**
 * @internal
 *
 * @covers \PhpCsFixer\Fixer\Phpdoc\PhpdocTagNoNamedArgumentsFixer
 *
 * @extends AbstractFixerTestCase<\PhpCsFixer\Fixer\Phpdoc\PhpdocTagNoNamedArgumentsFixer>
 *
 * @phpstan-import-type _AutogeneratedInputConfiguration from \PhpCsFixer\Fixer\Phpdoc\PhpdocTagNoNamedArgumentsFixer
 */
final class PhpdocTagNoNamedArgumentsFixerTest extends AbstractFixerTestCase
{
    public function testInvalidConfiguration(): void
    {
        $invalidDirectory = __DIR__.'/directory-404';

        $this->expectException(InvalidFixerConfigurationException::class);
        $this->expectExceptionMessage(\sprintf('[%s] The directory "%s" does not exists.', $this->fixer->getName(), $invalidDirectory));

        $this->fixer->configure(['directory' => $invalidDirectory]);
    }

    /**
     * @param _AutogeneratedInputConfiguration $configuration
     *
     * @dataProvider provideFixCases
     */
    public function testFix(string $expected, ?string $input = null, array $configuration = [], ?WhitespacesFixerConfig $whitespacesFixerConfig = null): void
    {
        $this->fixer->configure($configuration);
        if (null !== $whitespacesFixerConfig) {
            $this->fixer->setWhitespacesConfig($whitespacesFixerConfig);
        }
        $this->doTest($expected, $input, new \SplFileInfo(__DIR__.'/../..'));
    }

    /**
     * @return iterable<string, array{0: string, 1?: null|string, 2?: _AutogeneratedInputConfiguration}>
     */
    public static function provideFixCases(): iterable
    {
        yield 'do not add for anonymous class' => [
            <<<'PHP'
                <?php
                new class () {};
                PHP,
        ];

        yield 'do not add for different directory' => [
            <<<'PHP'
                <?php
                class Foo {}
                PHP,
            null,
            ['directory' => __DIR__.'/../../../src/Fixer'],
        ];

        yield 'do not add for internal class' => [
            <<<'PHP'
                <?php
                /**
                 * @internal
                 */
                class Foo {}
                PHP,
        ];

        yield 'create PHPDoc comment' => [
            <<<'PHP'
                <?php

                /**
                 * @no-named-arguments
                 */
                class Foo {}
                PHP,
            <<<'PHP'
                <?php
                class Foo {}
                PHP,
        ];

        yield 'create PHPDoc with description' => [
            <<<'PHP'
                <?php

                /**
                 * @no-named-arguments The description
                 */
                class Foo {}
                PHP,
            <<<'PHP'
                <?php
                class Foo {}
                PHP,
            ['description' => 'The description'],
        ];

        yield 'add description' => [
            <<<'PHP'
                <?php
                /**
                 * @no-named-arguments New description
                 */
                class Foo {}
                PHP,
            <<<'PHP'
                <?php
                /**
                 * @no-named-arguments
                 */
                class Foo {}
                PHP,
            ['description' => 'New description'],
        ];

        yield 'change description' => [
            <<<'PHP'
                <?php
                /**
                 * @no-named-arguments New description
                 */
                class Foo {}
                PHP,
            <<<'PHP'
                <?php
                /**
                 * @no-named-arguments Old description
                 */
                class Foo {}
                PHP,
            ['description' => 'New description'],
        ];

        yield 'remove description' => [
            <<<'PHP'
                <?php
                /**
                 * @no-named-arguments
                 */
                class Foo {}
                PHP,
            <<<'PHP'
                <?php
                /**
                 * @no-named-arguments Description to remove
                 */
                class Foo {}
                PHP,
        ];

        yield 'multiple classes' => [
            <<<'PHP'
                <?php

                /**
                 * @no-named-arguments
                 */
                class Foo {}

                new class {};

                /**
                 * @no-named-arguments
                 */
                class Bar {}
                PHP,
            <<<'PHP'
                <?php
                class Foo {}

                new class {};

                class Bar {}
                PHP,
        ];

        yield 'tabs and Windows Line endings' => [
            str_replace(
                ['    ', "\n"],
                ["\t", "\r\n"],
                <<<'PHP'
                    <?php

                    /**
                     * @no-named-arguments
                     */
                    class Foo {}
                    PHP,
            ),
            str_replace(
                ['    ', "\n"],
                ["\t", "\r\n"],
                <<<'PHP'
                    <?php

                    class Foo {}
                    PHP,
            ),
            [],
            new WhitespacesFixerConfig("\t", "\r\n"),
        ];
    }

    /**
     * @dataProvider provideFix80Cases
     *
     * @requires PHP >= 8.0
     */
    public function testFix80(string $expected, ?string $input = null): void
    {
        $this->doTest($expected, $input);
    }

    /**
     * @return iterable<string, array{0: string, 1?: string}>
     */
    public static function provideFix80Cases(): iterable
    {
        yield 'do not add for attribute class' => [
            <<<'PHP'
                <?php
                #[Attribute(flags: Attribute::TARGET_METHOD)]
                final class MyAttributeClass {}
                PHP,
        ];

        yield 'do not add for attribute class (with alias)' => [
            <<<'PHP'
                <?php
                namespace Foo;
                use Attribute as TheAttributeClass;
                #[TheAttributeClass(flags: TheAttributeClass::TARGET_METHOD)]
                abstract class MyAttributeClass {}
                PHP,
        ];
    }

    /**
     * @dataProvider provideFix82Cases
     *
     * @requires PHP >= 8.2
     */
    public function testFix82(string $expected, ?string $input = null): void
    {
        $this->doTest($expected, $input);
    }

    /**
     * @return iterable<string, array{0: string, 1?: string}>
     */
    public static function provideFix82Cases(): iterable
    {
        yield 'do not add for attribute (readonly) class' => [
            <<<'PHP'
                <?php

                /**
                 * @no-named-arguments
                 */
                #[FooAttribute]
                final readonly class NotAttributeClass1 {}

                #[Attribute(flags: Attribute::TARGET_METHOD)]
                abstract readonly class MyAttributeClass {}

                /**
                 * @no-named-arguments
                 */
                #[FooAttribute]
                #[BarAttribute]
                #[BazAttribute]
                final readonly class NotAttributeClass2 {}
                PHP,
            <<<'PHP'
                <?php
                #[FooAttribute]
                final readonly class NotAttributeClass1 {}

                #[Attribute(flags: Attribute::TARGET_METHOD)]
                abstract readonly class MyAttributeClass {}

                #[FooAttribute]
                #[BarAttribute]
                #[BazAttribute]
                final readonly class NotAttributeClass2 {}
                PHP,
        ];
    }
}
